#!/usr/bin/env perl
#
# unzip-k - UnZip for Korean
#
# unzip-k will list, test, or extract compressed files from a ZIP
# archive containing file or directory name encoded in Microsoft's
# CP949.
#
# http://ubuntu.or.kr/viewtopic.php?f=4&t=13970
#
# Seungwon Jeong <seungwon0@gmail.com>
#
# Copyright (C) 2011 by Seungwon Jeong

use strict;

use warnings;

use 5.010;

use Getopt::Long;

use Text::Glob qw<>;

use File::Glob qw< :glob >;

use App::UnZipK;

sub print_usage {
    print <<"END_USAGE";
UnZip-K $App::UnZipK::VERSION of 1 March 2011, by Seungwon Jeong.

Usage: unzip-k [-Z] [-opts[modifiers]] file[.zip] [list] [-x xlist] [-d exdir]
  Default action is to extract files in list, except those in xlist, to exdir;
  file[.zip] may be a wildcard.  -Z => ZipInfo mode ("unzip -Z" for usage).

  -p  extract files to pipe, no messages     -l  list files
  -f  freshen existing files, create none    -t  test compressed archive data
  -u  update files, create if necessary      -z  display archive comment only
  -x  exclude files that follow (in xlist)   -d  extract files into exdir
modifiers:
  -n  never overwrite existing files         -q  quiet mode
  -o  overwrite files WITHOUT prompting
  -j  junk paths (do not make directories)
  -C  match filenames case-insensitively
Examples:
  unzip-k data1 -x joe  => extract all files except joe from zipfile data1.zip
  unzip-k -p foo | more => send contents of foo.zip via pipe into program more
  unzip-k -fo foo bar   => quietly replace existing bar if archive file newer
END_USAGE
    return;
}

my @xfiles;

Getopt::Long::Configure('pass_through');
GetOptions( 'x=s{1,}' => \@xfiles ) or do { print_usage(); exit 1; };

# UnZip mode
my %unzip_option;
$unzip_option{xfiles} = \@xfiles;

# ZipInfo mode
my $zipinfo_mode;
my $zipinfo_time;
my $zipinfo_short;

my $strict_wildcard_slash;

Getopt::Long::Configure( 'no_pass_through', 'bundling' );
my @get_options_args = (
    'd=s' => \$unzip_option{exdir},

    # Options
    'Z' => \$zipinfo_mode,
    'c' => \$unzip_option{crt},
    'l' => \$unzip_option{list},
    'p' => \$unzip_option{pipe},
    't' => \$unzip_option{test},
    'T' => \$zipinfo_time,
    's' => \$zipinfo_short,
    'z' => \$unzip_option{comment_only},
    'f' => \$unzip_option{fresh},
    'u' => \$unzip_option{update},

    # Modifiers
    'C' => \$unzip_option{case_insensitive},
    'j' => \$unzip_option{junk_paths},
    'n' => \$unzip_option{never_overwrite},
    'o' => \$unzip_option{overwrite},
    'q' => \$unzip_option{quiet},
    'W' => \$strict_wildcard_slash,
);
GetOptions(@get_options_args) or do { print_usage(); exit 1; };

if ( !$strict_wildcard_slash ) {
    $Text::Glob::strict_wildcard_slash = 0;
}

if ( @ARGV < 1 ) {
    print_usage();
    exit;
}

my ( $file, @files ) = @ARGV;
$unzip_option{files} = \@files;

undef @ARGV;    # For IO::Prompt

# Do not use glob here because $file may contain space character.
my @archives = grep {-f} bsd_glob($file);

my $nr_success = 0;

for my $archive (@archives) {
    if ($zipinfo_mode) {
        App::UnZipK::zipinfo( $archive, $zipinfo_time ) and $nr_success++;
    }
    else {
        App::UnZipK::unzip( $archive, \%unzip_option ) and $nr_success++;
    }

    if ( @archives > 1 ) {
        say q{};
    }
}

if ($nr_success) {
    if ( $nr_success > 1 ) {
        say "$nr_success archives were successfully processed.";
    }

    exit;
}

for my $assumption ( grep {-f} ( $file, "$file.zip", "$file.ZIP" ) ) {
    if ($zipinfo_mode) {
        App::UnZipK::zipinfo( $assumption, $zipinfo_time ) and exit;
    }
    else {
        App::UnZipK::unzip( $assumption, \%unzip_option ) and exit;
    }
}

die "unzip-k:  cannot find or open $file, $file.zip or $file.ZIP.\n";

__END__

=head1 NAME

unzip-k - UnZip for Korean

=head1 SYNOPSIS

B<unzip-k> [B<-Z>] [B<-cflptuz>[B<jnoqCW>]] F<file>[F<.zip>]
[F<file(s)> ...] [-x F<xfile(s)> ...] [-d F<exdir>]

=head1 DESCRIPTION

I<unzip-k> will list, test, or extract compressed files from a ZIP
archive containing file or directory name encoded in Microsoft's
CP949. The default behavior (with no options) is to extract into the
current directory (and subdirectories below it) all files from the
specified ZIP archive.  A companion program, I<zip>(1), creates ZIP
archives; both programs are compatible with archives created by
PKWARE's I<PKZIP> and I<PKUNZIP> for MS-DOS, but in many cases the
program options or default behaviors differ.

=head1 ARGUMENTS

=over

=item F<file>[F<.zip>]

Path of the ZIP archive.  If the file specification is a wildcard,
each matching file is processed in an order determined by the
operating system (or file system).  Wildcard expressions are similar
to those supported in commonly used Unix shells (I<sh>, I<ksh>,
I<csh>) and may contain:

=over

=item B<*>

matches a sequence of 0 or more characters

=item B<?>

matches exactly 1 character

=item B<[...]>

matches any single character found inside the brackets; ranges are
specified by a beginning character, a hyphen, and an ending character.
If an exclamation point or a caret (`!' or `^') follows the left
bracket, then the range of characters within the brackets is
complemented (that is, anything I<except> the characters inside the
brackets is considered a match).  To specify a verbatim left bracket,
the three-character sequence ``[[]'' has to be used.

=back

(Be sure to quote any character that might otherwise be interpreted or
modified by the operating system) If no matches are found, the
specification is assumed to be a literal filename; and if that also
fails, the suffix .zip is appended.

=item [F<file(s)>]

An optional list of archive members to be processed, separated by
spaces.  Regular expressions (wildcards) may be used to match multiple
members.  Be sure to quote expressions that would otherwise be
expanded or modified by the operating system.

=item [-x F<file(s)>]

An optional list of archive members to be excluded from processing.
Since wildcard characters normally match (`/') directory separators
(for exceptions see the option -W), this option may be used to exclude
any files that are in subdirectories.  For example, ``unzip-k foo
*.[ch] -x */*'' would extract all C source files in the main
directory, but none in any subdirectories.  Without the -x option, all
C source files in all directories within the zipfile would be
extracted.

=item [-d F<exdir>]

An optional directory to which to extract files.  By default, all
files and subdirectories are recreated in the current direc‐ tory; the
-d option allows extraction in an arbitrary directory (always assuming
one has permission to write to the directory).  This option need not
appear at the end of the command line; it is also accepted before the
zipfile specification (with the nor‐ mal options), immediately after
the zipfile specification, or between the F<file(s)> and the -x
option.  The option and directory may be concatenated without any
white space between them, but note that this may cause normal shell
behavior to be suppressed.  In particular, ``-d ~'' (tilde) is
expanded by Unix C shells into the name of the user's home directory,
but ``-d~'' is treated as a literal subdirectory ``~'' of the current
direc‐ tory.

=back

=head1 OPTIONS

=over

=item B<-Z>

I<zipinfo>(1) mode.  If the first option on the command line is -Z,
The remaining options are taken to be I<zipinfo>(1) options.  See the
appropriate manual page for a description of these options.

=item B<-c>

extract files to stdout/screen (``CRT'').  This option is similar to
the -p option except that the name of each file is printed as it is
extracted.  This option is not listed in the unzip-k usage screen.

=item B<-f>

freshen existing files, i.e., extract only those files that already
exist on disk and that are newer than the disk copies.  By default
I<unzip-k> queries before overwriting, but the -o option may be used
to suppress the queries.  Note that under many operating systems, the
TZ (timezone) environment variable must be set correctly in order for
-f and -u to work properly (under Unix the variable is usually set
automatically).  The reasons for this are somewhat subtle but have to
do with the differences between DOS-format file times (always local
time) and Unix-format times (always in GMT/UTC) and the necessity to
compare the two.  A typical TZ value is ``PST8PDT'' (US Pacific time
with automatic adjustment for Daylight Savings Time or ``summer
time'').

=item B<-l>

list archive files.  The names, uncompressed file sizes and
modification dates and times of the specified files are printed, along
with totals for all files specified.  In addition, the zipfile comment
and individual file comments (if any) are displayed.

=item B<-p>

extract files to pipe (stdout).  Nothing but the file data is sent to
stdout, and the files are always extracted in binary format, just as
they are stored (no conversions).

=item B<-t>

test archive files.  This option extracts each specified file in
memory and compares the CRC (cyclic redundancy check, an enhanced
checksum) of the expanded file with the original file's stored CRC
value.

=item B<-u>

update existing files and create new ones if needed.  This option
performs the same function as the -f option, extracting (with query)
files that are newer than those with the same name on disk, and in
addition it extracts those files that do not already exist on disk.
See -f above for information on setting the timezone properly.

=item B<-z>

display only the archive comment.

=back

=head1 MODIFIERS

=over

=item B<-C>

use case-insensitive matching for the selection of archive entries
from the command-line list of extract selection patterns.  unzip-k's
philosophy is ``you get what you ask for''.  Because some file systems
are fully case-sensitive (notably those under the Unix operating
system) and because ZIP archives are portable across platforms,
unzip-k's default behavior is to match both wildcard and literal
filenames case-sensitively.  That is, specifying ``makefile'' on the
command line will only match ``makefile'' in the archive, not
``Makefile'' or ``MAKEFILE'' (and similarly for wildcard
specifications).  Since this does not correspond to the behavior of
many other operating/file systems (for example, OS/2 HPFS, which
preserves mixed case but is not sensitive to it), the -C option may be
used to force all filename matches to be case-insensitive.  In the
example above, all three files would then match ``makefile'' (or
``make*'', or similar).  The -C option affects file specs in both the
normal file list and the excluded-file list (xlist).

Please note that the -C option does neither affect the search for the
zipfile(s) nor the matching of archive entries to existing files on
the extraction path.  On a case-sensitive file system, unzip-k will
never try to overwrite a file ``FOO'' when extracting an entry
``foo''!

=item B<-j>

junk paths.  The archive's directory structure is not recreated; all
files are deposited in the extraction directory (by default, the
current one).

=item B<-n>

never overwrite existing files.  If a file already exists, skip the
extraction of that file without prompting.  By default I<unzip-k>
queries before extracting any file that already exists; the user may
choose to overwrite only the current file, overwrite all files, skip
extraction of the current file, skip extraction of all existing files,
or rename the current file.

=item B<-o>

overwrite existing files without prompting.  This is a dangerous
option, so use it with care.

=item B<-q>

perform operations quietly.  Ordinarily I<unzip-k> prints the names of
the files it's extracting or testing, the extraction methods, any file
or zipfile comments that may be stored in the archive, and possibly a
summary when finished with each archive.  The -q options suppress the
printing of some or all of these messages.

=item B<-W>

modifies the pattern matching routine so that both `?' (single-char
wildcard) and `*' (multi-char wildcard) do not match the directory
separator character `/'.  Examples:

"*.c" matches "foo.c" but not "mydir/foo.c"
"*/*.c" matches "bar/foo.c" but not "baz/bar/foo.c"
"??*/*" matches "ab/foo" and "abc/foo" but not "a/foo" or "a/b/foo"

=back

=head1 EXAMPLES

To use I<unzip-k> to extract all members of the archive F<letters.zip>
into the current directory and subdirectories below it, creating any
subdirectories as necessary:

	unzip-k letters

To extract all members of F<letters.zip> into the current directory
only:

	unzip-k -j letters

To test F<letters.zip>, printing only a summary message indicating
whether the archive is OK or not:

	unzip-k -tq letters

To extract the binary file F<paper1.dvi> to standard output and pipe
it to a printing program:

	unzip-k -p articles paper1.dvi | dvips

To extract all FORTRAN and C source files--*.f, *.c, *.h, and
Makefile--into the /tmp directory:

	unzip-k source.zip "*.[fch]" Makefile -d /tmp

(the double quotes are necessary only in Unix and only if globbing is
turned on).  To extract all FORTRAN and C source files, regardless of
case (e.g., both *.c and *.C, and any makefile, Makefile, MAKEFILE or
similar):

	unzip-k -C source.zip "*.[fch]" makefile -d /tmp

To extract only newer versions of the files already in the current
directory, without querying (NOTE: be careful of unzipping in one
timezone a zipfile created in another--ZIP archives other than those
created by Zip 2.1 or later contain no timezone information, and a
``newer'' file from an eastern timezone may, in fact, be older):

	unzip-k -fo sources

To extract newer versions of the files already in the current
directory and to create any files not already there (same caveat as
previous example):

	unzip-k -uo sources

=head1 URL

L<https://github.com/seungwon0/unzip-k>

=head1 AUTHOR

Seungwon Jeong E<lt>seungwon0@gmail.comE<gt>

=head1 SEE ALSO

funzip(1), zip(1), unzip(1), zipcloak(1), zipgrep(1), zipinfo(1),
zipnote(1), zipsplit(1)

=cut
